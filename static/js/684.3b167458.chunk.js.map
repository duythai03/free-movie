{"version":3,"file":"static/js/684.3b167458.chunk.js","mappings":"+SAcA,SAASA,IACP,OAAOC,IAAiBC,iBAAmBC,KAAKC,UAAUC,UAAUC,SACtE,CACA,SAASL,IACP,OAAOM,OAAOJ,KAAKC,UAAUI,YAAYC,aAC3C,CACA,SAASC,IACP,OAAOT,IAAiBU,mBAC1B,CACA,SAASC,IAAsB,IAAAC,EAC7B,OAAuB,QAAvBA,EAAOH,WAAgB,IAAAG,OAAA,EAAhBA,EAAkBC,gBAAgBC,MAAM,EACjD,CACA,SAASC,EAAqBC,GAAK,IAAAC,EAEjC,OADuC,QAAxBA,EAAGN,WAAqB,IAAAM,OAAA,EAArBA,EAAuBH,MAAMI,cACvB,OAAHF,QAAG,IAAHA,OAAG,EAAHA,EAAKA,IAC5B,CAUA,SAASG,EAAoBC,GAE3B,MADuB,2BAAHC,OAA8BD,EAEpD,CACA,SAASE,EAAuBC,EAAMC,GACpC,OAAOC,EAAAA,EAAAA,IAAOzB,IAAkBuB,EAAMC,EACxC,CA4GA,IAAIE,EAAsBC,OAAOC,OAAO,CACtCC,UAAW,KACXC,iBA5GF,MACEC,WAAAA,GACEC,KAAKC,KAAO,aACd,CAIA,QAAI/B,GACF,OAAOF,GACT,CACAkC,SAAAA,GACE,MAAO,OACT,CACAC,OAAAA,CAAQnB,GACN,OAAOoB,EAAAA,KAAcC,EAAAA,KAAUC,EAAAA,EAAAA,IAAiBtB,EAClD,CACA,YAAMuB,CAAOC,GACX,IAAIC,EAAWC,EAAWC,EAC1B,IAAI,IAAAC,EACFH,QAAkBT,KAAKa,GAAGL,GACrBR,KAAKc,IACRd,KAAKc,EAAI,IAAI5C,KAAKC,UAAU4C,aAC5B,IAAI7C,KAAKC,UAAU6C,uBAAuBhB,KAAKc,IAEjDJ,EAAYF,EAAIS,OAAOC,YAAY,0BAA2B,CAC5DC,QAASV,IAEXD,EAAIS,OAAOG,cAAcV,GACzBV,KAAKqB,GAAGb,EAAK,aAAcE,SACrBV,KAAKsB,IAAGC,EAAAA,EAAAA,MAAKf,EAAIgB,OAAOC,aAC9BjB,EAAIkB,OAAOC,mBAAmBC,IAAI,CAChCC,WAA4B,QAAlBjB,EAAEnC,WAAgB,IAAAmC,OAAA,EAAhBA,EAAkBkB,gBAAgBC,eAE5ChE,KAAmBiC,KAAKqB,GAAGb,EAAK,YAAaE,EACnD,CAAE,MAAOtB,GAAM,IAAA4C,EACb,MAAMC,EAAQ7C,aAAgB8C,MAAQ9C,EAAOY,KAAKmC,IAC/C/C,EAAO,IAAIgD,cACZ,kBAaF,MAXAzB,EAAaH,EAAIS,OAAOC,YAAY,2BAA4B,CAC9DmB,OAAQJ,EACRd,QAAkB,QAAXa,EAAEtB,SAAS,IAAAsB,EAAAA,EAAIvB,EACtB6B,YAAY,IAEd9B,EAAIS,OAAOsB,SAAS5B,GACpBX,KAAKqB,GACHb,EACAzC,IAAoB,YAAc,eAClC4C,GAEIsB,CACR,CAAE,QAAQ,IAAAO,EAAAC,EACRjC,EAAIS,OAAOsB,SAAS,2BAA4B,CAC9CpB,QAAgC,QAAzBqB,EAAY,QAAZC,EAAE9B,SAAU,IAAA8B,EAAAA,EAAI/B,SAAS,IAAA8B,EAAAA,EAAI/B,GAExC,CACF,CACA,UAAMiC,CAAKlC,GACT,GAAImC,EAAAA,GACF,MAAMT,MAAM,4DAEd,IAAKlC,KAAKc,EACR,MAAMoB,MAAM,qDAEd,OAAO,WAAW,8BAAkCU,oBAAmB5C,KAAKc,EAAGN,EACjF,CACA,QAAMK,CAAGL,GACP,GA1GJ,WAAkC,IAAAqC,EAChC,QAAoB,QAAZA,EAACvE,OAAOJ,YAAI,IAAA2E,IAAXA,EAAa1E,UACxB,CAwGQ2E,GAA0B,OAC9B,MAAMC,EAAiBvC,EAAIS,OAAOC,YAAY,0BAC9CV,EAAIS,OAAOsB,SAASQ,SACdC,EAAAA,EAAAA,IA/GD,oFAgHCC,eAAeC,YAAY,wBACjC,MAAMC,EAAc3C,EAAIS,OAAOC,YAAY,qBAAsB,CAAEC,QAAS4B,IAE5E,GADAvC,EAAIS,OAAOsB,SAASY,IA7GxB,WAA2B,IAAAC,EACzB,QAAsB,QAAdA,EAAC9E,OAAO+E,cAAM,IAAAD,GAAM,QAANA,EAAbA,EAAelF,YAAI,IAAAkF,IAAnBA,EAAqBE,YAChC,CA4GSC,GACH,MAAMvD,KAAKmC,GAAG,qBAAsB,+CAEtC,OAAOgB,CACT,CACA,QAAM7B,CAAGkC,GACPxD,KAAKyD,GAAGD,GACR,MAAME,QAAkB1D,KAAK9B,KAAKyF,iBAClC,GAAID,EACF,MAAM1D,KAAKmC,GACTuB,EAAUtB,cACVjD,EAAoBuE,GAG1B,CACAD,EAAAA,CAAGD,GAAS,IAAAI,EACD,QAATA,EAAA5D,KAAK9B,YAAI,IAAA0F,GAATA,EAAWC,WAAW,CAzGtBC,SAAU,QACVC,eAAgBV,OAAOnF,KAAK8F,eAAeC,cAC3CC,sBAAuBb,OAAOnF,KAAKY,MAAMqF,8BACzCC,oBAAoB,EACpBC,2BAA2B,KAuGtBb,GAEP,CACAnC,EAAAA,CAAGb,EAAK8D,EAAOnD,GACb,MAAMkB,EAAS,CAAE9C,KAAM,cAAe+E,SACtC9D,EAAI+D,SAASC,EAAE,yBAA0BnC,EAAQlB,EACnD,CACAgB,EAAAA,CAAG/C,EAAMqF,GACP,MAAMxC,EAAQC,MAAMuC,GAEpB,OADAxC,EAAM7C,KAAOA,EACN6C,CACT,I","sources":["../node_modules/@vidstack/react/prod/chunks/vidstack-BwLZNdY5.js"],"sourcesContent":["\"use client\"\n\nimport { listen, IS_CHROME, IS_IOS, canGoogleCastSrc, IS_SERVER, loadScript } from './vidstack-Dqbnf1jT.js';\nimport { peek } from './vidstack-DcuYVyd0.js';\n\nfunction getCastFrameworkURL() {\n  return \"https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1\";\n}\nfunction hasLoadedCastFramework() {\n  return !!window.cast?.framework;\n}\nfunction isCastAvailable() {\n  return !!window.chrome?.cast?.isAvailable;\n}\nfunction isCastConnected() {\n  return getCastContext().getCastState() === cast.framework.CastState.CONNECTED;\n}\nfunction getCastContext() {\n  return window.cast.framework.CastContext.getInstance();\n}\nfunction getCastSession() {\n  return getCastContext().getCurrentSession();\n}\nfunction getCastSessionMedia() {\n  return getCastSession()?.getSessionObj().media[0];\n}\nfunction hasActiveCastSession(src) {\n  const contentId = getCastSessionMedia()?.media.contentId;\n  return contentId === src?.src;\n}\nfunction getDefaultCastOptions() {\n  return {\n    language: \"en-US\",\n    autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED,\n    receiverApplicationId: chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID,\n    resumeSavedSession: true,\n    androidReceiverCompatible: true\n  };\n}\nfunction getCastErrorMessage(code) {\n  const defaultMessage = `Google Cast Error Code: ${code}`;\n  return defaultMessage;\n}\nfunction listenCastContextEvent(type, handler) {\n  return listen(getCastContext(), type, handler);\n}\n\nclass GoogleCastLoader {\n  constructor() {\n    this.name = \"google-cast\";\n  }\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}\n   */\n  get cast() {\n    return getCastContext();\n  }\n  mediaType() {\n    return \"video\";\n  }\n  canPlay(src) {\n    return IS_CHROME && !IS_IOS && canGoogleCastSrc(src);\n  }\n  async prompt(ctx) {\n    let loadEvent, openEvent, errorEvent;\n    try {\n      loadEvent = await this.Fj(ctx);\n      if (!this.f) {\n        this.f = new cast.framework.RemotePlayer();\n        new cast.framework.RemotePlayerController(this.f);\n      }\n      openEvent = ctx.player.createEvent(\"google-cast-prompt-open\", {\n        trigger: loadEvent\n      });\n      ctx.player.dispatchEvent(openEvent);\n      this.De(ctx, \"connecting\", openEvent);\n      await this.Gj(peek(ctx.$props.googleCast));\n      ctx.$state.remotePlaybackInfo.set({\n        deviceName: getCastSession()?.getCastDevice().friendlyName\n      });\n      if (isCastConnected()) this.De(ctx, \"connected\", openEvent);\n    } catch (code) {\n      const error = code instanceof Error ? code : this.Ee(\n        (code + \"\").toUpperCase(),\n        \"Prompt failed.\"\n      );\n      errorEvent = ctx.player.createEvent(\"google-cast-prompt-error\", {\n        detail: error,\n        trigger: openEvent ?? loadEvent,\n        cancelable: true\n      });\n      ctx.player.dispatch(errorEvent);\n      this.De(\n        ctx,\n        isCastConnected() ? \"connected\" : \"disconnected\",\n        errorEvent\n      );\n      throw error;\n    } finally {\n      ctx.player.dispatch(\"google-cast-prompt-close\", {\n        trigger: errorEvent ?? openEvent ?? loadEvent\n      });\n    }\n  }\n  async load(ctx) {\n    if (IS_SERVER) {\n      throw Error(\"[vidstack] can not load google cast provider server-side\");\n    }\n    if (!this.f) {\n      throw Error(\"[vidstack] google cast player was not initialized\");\n    }\n    return new (await import('./vidstack-bT8BlD7X.js')).GoogleCastProvider(this.f, ctx);\n  }\n  async Fj(ctx) {\n    if (hasLoadedCastFramework()) return;\n    const loadStartEvent = ctx.player.createEvent(\"google-cast-load-start\");\n    ctx.player.dispatch(loadStartEvent);\n    await loadScript(getCastFrameworkURL());\n    await customElements.whenDefined(\"google-cast-launcher\");\n    const loadedEvent = ctx.player.createEvent(\"google-cast-loaded\", { trigger: loadStartEvent });\n    ctx.player.dispatch(loadedEvent);\n    if (!isCastAvailable()) {\n      throw this.Ee(\"CAST_NOT_AVAILABLE\", \"Google Cast not available on this platform.\");\n    }\n    return loadedEvent;\n  }\n  async Gj(options) {\n    this.Hj(options);\n    const errorCode = await this.cast.requestSession();\n    if (errorCode) {\n      throw this.Ee(\n        errorCode.toUpperCase(),\n        getCastErrorMessage(errorCode)\n      );\n    }\n  }\n  Hj(options) {\n    this.cast?.setOptions({\n      ...getDefaultCastOptions(),\n      ...options\n    });\n  }\n  De(ctx, state, trigger) {\n    const detail = { type: \"google-cast\", state };\n    ctx.delegate.c(\"remote-playback-change\", detail, trigger);\n  }\n  Ee(code, message) {\n    const error = Error(message);\n    error.code = code;\n    return error;\n  }\n}\n\nvar loader = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  GoogleCastLoader: GoogleCastLoader\n});\n\nexport { getCastContext, getCastErrorMessage, getCastSession, getCastSessionMedia, hasActiveCastSession, listenCastContextEvent, loader };\n"],"names":["isCastConnected","getCastContext","getCastState","cast","framework","CastState","CONNECTED","window","CastContext","getInstance","getCastSession","getCurrentSession","getCastSessionMedia","_getCastSession","getSessionObj","media","hasActiveCastSession","src","_getCastSessionMedia","contentId","getCastErrorMessage","code","concat","listenCastContextEvent","type","handler","listen","loader","Object","freeze","__proto__","GoogleCastLoader","constructor","this","name","mediaType","canPlay","IS_CHROME","IS_IOS","canGoogleCastSrc","prompt","ctx","loadEvent","openEvent","errorEvent","_getCastSession2","Fj","f","RemotePlayer","RemotePlayerController","player","createEvent","trigger","dispatchEvent","De","Gj","peek","$props","googleCast","$state","remotePlaybackInfo","set","deviceName","getCastDevice","friendlyName","_openEvent","error","Error","Ee","toUpperCase","detail","cancelable","dispatch","_ref","_errorEvent","load","IS_SERVER","GoogleCastProvider","_window$cast","hasLoadedCastFramework","loadStartEvent","loadScript","customElements","whenDefined","loadedEvent","_window$chrome","chrome","isAvailable","isCastAvailable","options","Hj","errorCode","requestSession","_this$cast","setOptions","language","autoJoinPolicy","AutoJoinPolicy","ORIGIN_SCOPED","receiverApplicationId","DEFAULT_MEDIA_RECEIVER_APP_ID","resumeSavedSession","androidReceiverCompatible","state","delegate","c","message"],"sourceRoot":""}